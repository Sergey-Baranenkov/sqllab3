{"version":3,"sources":["Fetcher.js","App.js","serviceWorker.js","index.js"],"names":["Fetcher","requestAddress","params","a","method","responseType","url","URL","search","URLSearchParams","toString","fetch","response","ok","uColNames","commColNames","srv","ButtonWithSingleInput","buttonText","inputPlaceholder","onClick","useState","inputText","updateInputText","className","type","value","placeholder","onChange","target","ButtonWithTwoInput","inputPlaceholder1","inputPlaceholder2","inputText1","updateInputText1","inputText2","updateInputText2","Table","data","columnNames","map","c_name","row","Object","keys","prop","App","state","toShow","usersData","commentsData","lastError","operation","isError","this","name","checked","setState","e","r","text","nickname","userId","newNickname","user","user_id","filter","messageText","authId","commentId","comment","comment_id","message_text","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d68a152.chunk.js","sourcesContent":["export default async function Fetcher(requestAddress, params, method = \"GET\", responseType=\"json\"){\n    const url = new URL(requestAddress);\n    url.search = new URLSearchParams(params).toString();\n    try{\n        const response = await fetch(\n            url.toString(),\n            {method: method}\n        );\n        if (!response.ok){\n            return [true, null];\n        }\n        return [false, await response[responseType]()]\n    }catch (err) {\n        return [true, null];\n    }\n}","import React, {useState} from 'react';\nimport './App.scss';\nimport Fetcher from \"./Fetcher\";\n\nconst comments = \"comments\";\nconst users = \"users\";\nconst uColNames = [\"user id\", \"nickname\", \"registered at\"]\nconst commColNames = [\"author id\",\"commment id\", \"text\", \"creation time\", \"modification time\"];\nconst srv = \"http://localhost:9000\"\nclass App extends React.Component{\n  state = {\n      toShow: users,\n      usersData: [],\n      commentsData : [],\n      lastError: {operation: null, isError: false}\n  }\n\n  render() {\n    return (\n        <div  className={\"container\"}>\n        <div className={\"error_block\"}>\n            <span>Последняя операция: {this.state.lastError.operation}</span>\n            <span>Была ошибка: {this.state.lastError.isError ? \"да\" : \"нет\"}</span>\n        </div>\n        <div>\n            <input\n                type=\"radio\" name=\"table_selector\"\n                checked={this.state.toShow === users}\n                onChange={()=>{this.setState({toShow: users})}}\n            />\n            Пользователи\n            <input\n                type=\"radio\" name=\"table_selector\"\n                checked={this.state.toShow === comments}\n                onChange={()=>{this.setState({toShow:comments})}}\n            />\n            Комментарии\n        </div>\n          <div className={\"buttons_block\"}>\n            <button onClick={async ()=>{\n                const [e] = await Fetcher(\n                    srv+\"/initdb\",\n                    {},\n                    \"GET\",\n                    \"text\");\n                this.setState({lastError: {operation:\"initdb\",isError: e}})\n            }}>\n              Инициализировать/подключиться к бд\n            </button>\n            <button onClick={async ()=>{\n                const [e] = await Fetcher(\n                    srv+\"/dropdb\",\n                    {},\n                    \"GET\",\n                    \"text\");\n                if (e === false){\n                    this.setState({usersData: [], commentsData: []})\n                }\n                this.setState({lastError: {operation:\"dropdb\",isError: e}})\n            }}>\n              Удалить бд\n            </button>\n            <button onClick={async ()=>{\n                const [e] = await Fetcher(\n                    srv+\"/inittables\",\n                    {},\n                    \"GET\",\n                    \"text\");\n                this.setState({lastError: {operation:\"inittables\",isError: e}})\n            }}>\n              Инициализировать таблицы\n            </button>\n          </div>\n            {\n                this.state.toShow === users\n                ?\n                <>\n                    <div className={\"buttons_block\"}>\n                        <button onClick={async ()=>{\n                            const [e] = await Fetcher(\n                                srv+\"/truncateusers\",\n                                {},\n                                \"GET\",\n                                \"blob\");\n                            if (e === false){\n                                this.setState({usersData: [], commentsData: []})\n                            }\n                            this.setState({lastError: {operation:\"truncateusers\",isError: e}})\n                        }}>\n                            Очистить пользователей\n                        </button>\n\n                        <button onClick={async ()=>{\n                            const [e, r] = await Fetcher(\n                                srv+\"/getallusers\",\n                                {},\n                                \"GET\",\n                                \"json\");\n                            if (e === false){\n                                this.setState({usersData: r})\n                            }\n                            this.setState({lastError: {operation:\"getallusers\",isError: e}})\n                        }}>\n                            Получить всех пользователей\n                        </button>\n\n                        <ButtonWithSingleInput buttonText={\"Получить пользователей с заданным никнеймом\"}\n                                               inputPlaceholder={\"никнейм\"}\n                                               onClick={async (text)=>{\n                                                   const [e, r] = await Fetcher(\n                                                       srv+\"/selectusersbynickname\",\n                                                       {nickname: text},\n                                                       \"GET\",\n                                                       \"json\");\n                                                   if (e === false && r !==null){\n                                                       this.setState({usersData: r})\n                                                   }\n                                                   this.setState({lastError: {operation:\"selectusersbynickname\",isError: e}})\n                                               }}\n                        />\n                    </div>\n                    <div className={\"buttons_block\"}>\n                        <ButtonWithSingleInput buttonText={\"Добавить пользователя\"}\n                                               inputPlaceholder={\"никнейм\"}\n                                               onClick={async (text)=>{\n                                                   const [e, r] = await Fetcher(\n                                                       srv+\"/insertuser\",\n                                                       {nickname: text},\n                                                       \"GET\",\n                                                       \"json\");\n                                                   if (e === false && r !==null){\n                                                       this.setState(state => ({usersData: [...state.usersData, r]}))\n                                                   }\n                                                   this.setState({lastError: {operation:\"insertuser\",isError: e}});\n                                               }}\n                        />\n\n                        <ButtonWithTwoInput buttonText={\"Обновить никнейм пользователя\"}\n                                            inputPlaceholder1={\"id пользователя\"}\n                                            inputPlaceholder2={\"новый никнейм\"}\n                                            onClick={async (userId, newNickname)=>{\n                                                const [e, r] = await Fetcher(\n                                                    srv+\"/updateusernickname\",\n                                                    {userId, newNickname},\n                                                    \"GET\",\n                                                    \"json\");\n                                                if (e === false && r !==null){\n                                                    this.setState(state => ({usersData: state.usersData.map((user)=>{\n                                                            if (user.user_id === +userId){\n                                                                return r;\n                                                            }\n                                                            return user;\n                                                        })}))\n                                                }\n                                                this.setState({lastError: {operation:\"updateusernickname\",isError: e}});\n                                            }}\n                        />\n                    </div>\n\n                    <div className={\"buttons_block\"}>\n                        <ButtonWithSingleInput buttonText={\"Удалить конкретного пользователя\"}\n                                               inputPlaceholder={\"id пользователя\"}\n                                               onClick={async (userId)=>{\n                                                   const [e, r] = await Fetcher(\n                                                       srv+\"/deleteparticularuser\",\n                                                       {userId},\n                                                       \"GET\",\n                                                       \"text\");\n                                                   if (e === false && r !==null){\n                                                       this.setState(state => ({usersData: state.usersData.filter(user=>{\n                                                           return user.user_id !== + userId;\n                                                           })}))\n                                                   }\n                                                   this.setState({lastError: {operation:\"deleteparticularuser\",isError: e}});\n                                               }}\n                        />\n\n                        <ButtonWithSingleInput buttonText={\"Удалить пользователей по никнейму\"}\n                                               inputPlaceholder={\"никнейм пользователя\"}\n                                               onClick={async (nickname)=>{\n                                                   const [e, r] = await Fetcher(\n                                                       srv+\"/deleteusersbynickname\",\n                                                       {nickname},\n                                                       \"GET\",\n                                                       \"text\");\n                                                   if (e === false && r !==null){\n                                                       this.setState(state => ({usersData: state.usersData.filter(user=>{\n                                                               return user.nickname !== nickname;\n                                                           })}))\n                                                   }\n                                                   this.setState({lastError: {operation:\"deleteusersbynickname\",isError: e}});\n                                               }}\n                        />\n                    </div>\n                    <Table columnNames = {uColNames} data = {this.state.usersData}/>\n                </>\n                :\n                <>\n                    <div className={\"buttons_block\"}>\n                        <button onClick={async ()=>{\n                            const [e] = await Fetcher(\n                                srv+\"/truncatecomments\",\n                                {},\n                                \"GET\",\n                                \"text\");\n                            if (e === false){\n                                this.setState({commentsData: []})\n                            }\n                            this.setState({lastError: {operation:\"truncatecomments\",isError: e}})\n                        }}>\n                            Очистить комментарии\n                        </button>\n\n                        <button onClick={async ()=>{\n                            const [e, r] = await Fetcher(\n                                srv+\"/getallcomments\",\n                                {},\n                                \"GET\",\n                                \"json\");\n                            if (e === false && r !==null){\n                                this.setState({commentsData: r})\n                            }\n                            this.setState({lastError: {operation:\"getallcomments\",isError: e}})\n                        }}>\n                            Получить все комментарии\n                        </button>\n\n                        <ButtonWithSingleInput buttonText={\"Получить комментарии с заданным текстом\"}\n                                               inputPlaceholder={\"текст комментария\"}\n                                               onClick={async (text)=>{\n                                                   const [e, r] = await Fetcher(\n                                                       srv+\"/selectcommentbymessage\",\n                                                       {messageText:text},\n                                                       \"GET\",\n                                                       \"json\");\n                                                   if (e === false && r !==null){\n                                                       this.setState({commentsData: r})\n                                                   }\n                                                   this.setState({lastError: {operation:\"selectcommentbymessage\",isError: e}})\n                                               }}\n                        />\n\n                    </div>\n\n                    <div className={\"buttons_block\"}>\n\n                        <ButtonWithTwoInput buttonText={\"Добавить комментарий\"}\n                                            inputPlaceholder1={\"id автора\"}\n                                            inputPlaceholder2={\"текст\"}\n                                            onClick={async (authId, text)=>{\n                                                const [e, r] = await Fetcher(\n                                                    srv+\"/insertcomment\",\n                                                    {authId, messageText: text},\n                                                    \"GET\",\n                                                    \"json\");\n                                                if (e === false && r !==null){\n                                                    this.setState(state => ({commentsData: [...state.commentsData, r]}))\n                                                }\n                                                this.setState({lastError: {operation:\"insertcomment\",isError: e}});\n                                            }}\n\n                        />\n\n                        <ButtonWithTwoInput buttonText={\"Обновить текст комментария\"}\n                                            inputPlaceholder1={\"id комментария\"}\n                                            inputPlaceholder2={\"новый текст\"}\n                                            onClick={async (commentId, text)=>{\n                                                const [e, r] = await Fetcher(\n                                                    srv+\"/updatecommenttext\",\n                                                    {commentId, messageText: text},\n                                                    \"GET\",\n                                                    \"json\");\n                                                if (e === false && r !==null){\n                                                    this.setState(state => ({commentsData: state.commentsData.map((comment)=>{\n                                                            if (comment.comment_id === +commentId){\n                                                                return r;\n                                                            }\n                                                            return comment;\n                                                        })}))\n                                                }\n                                                this.setState({lastError: {operation:\"updatecommenttext\",isError: e}});\n                                            }}\n                        />\n\n                    </div>\n\n                    <div className={\"buttons_block\"}>\n                        <ButtonWithSingleInput buttonText={\"Удалить комментарии по id\"}\n                                               inputPlaceholder={\"comment id\"}\n                                               onClick={async (commentId)=>{\n                                                   const [e] = await Fetcher(\n                                                       srv+\"/deleteparticularcomment\",\n                                                       {commentId},\n                                                       \"GET\",\n                                                       \"text\");\n                                                   if (e === false){\n                                                       this.setState(state => ({commentsData: state.commentsData.filter(comment =>{\n                                                               return comment.comment_id !== +commentId;\n                                                           })}))\n                                                   }\n                                                   this.setState({lastError: {operation:\"deleteparticularcomment\",isError: e}});\n                                               }}\n                        />\n\n                        <ButtonWithSingleInput buttonText={\"Удалить комментарии по тексту\"}\n                                               inputPlaceholder={\"текст\"}\n                                               onClick={async (messageText)=>{\n                                                   const [e] = await Fetcher(\n                                                       srv+\"/deletecommentsbymessage\",\n                                                       {messageText},\n                                                       \"GET\",\n                                                       \"text\");\n                                                   if (e === false){\n                                                       this.setState(state => ({commentsData: state.commentsData.filter(comment =>{\n                                                               return comment.message_text !== messageText;\n                                                           })}))\n                                                   }\n                                                   this.setState({lastError: {operation:\"deletecommentsbymessage\",isError: e}});\n                                               }}\n                        />\n                    </div>\n                    <Table columnNames = {commColNames} data = {this.state.commentsData}/>\n                </>\n            }\n        </div>\n    );\n  }\n}\n\nfunction ButtonWithSingleInput({buttonText, inputPlaceholder, onClick}) {\n    const [inputText, updateInputText] = useState(\"\");\n    const updateText = ({target})=>{\n        updateInputText(target.value);\n    }\n    const _onCLick = ()=>{\n        onClick(inputText);\n    }\n    return (\n        <>\n            <div className={\"custom_block\"}>\n                <button onClick={_onCLick}>{buttonText}</button>\n                <input type={\"text\"} value={inputText} placeholder={inputPlaceholder} onChange={updateText}/>\n            </div>\n        </>\n    )\n}\n\nfunction ButtonWithTwoInput({buttonText, inputPlaceholder1, inputPlaceholder2, onClick}) {\n    const [inputText1, updateInputText1] = useState(\"\");\n    const [inputText2, updateInputText2] = useState(\"\");\n\n    const updateText1 = ({target})=>{\n        updateInputText1(target.value);\n    }\n\n    const updateText2 = ({target})=>{\n        updateInputText2(target.value);\n    }\n\n    const _onCLick = ()=>{\n        onClick(inputText1, inputText2);\n    }\n\n    return (\n        <>\n            <div className={\"custom_block\"}>\n                <button onClick={_onCLick}>{buttonText}</button>\n                <input type={\"text\"} value={inputText1} placeholder={inputPlaceholder1} onChange={updateText1}/>\n                <input type={\"text\"} value={inputText2} placeholder={inputPlaceholder2} onChange={updateText2}/>\n            </div>\n        </>\n    )\n}\n\nfunction Table({data, columnNames}) {\n  return (\n      <table>\n          <tr>\n              {\n                  columnNames.map(c_name =>\n                      <td>{c_name}</td>\n                  )\n              }\n         </tr>\n\n          {\n              data &&\n              data.map(row =>\n                  <tr>\n                      {\n                          Object.keys(row).map(prop => <td>{row[prop]}</td>)\n                      }\n                  </tr>\n              )\n          }\n      </table>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}